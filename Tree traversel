class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> list=new ArrayList<>();
        if (root!=null){  
            list.add(root.val);  
            list.addAll(preorderTraversal(root.left));  
            list.addAll(preorderTraversal(root.right)); 
        }
        return list; 
    }
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> list=new ArrayList<>();
        if (root!=null){  
            list.addAll(postorderTraversal(root.left));  
            list.addAll(postorderTraversal(root.right));   
            list.add(root.val); 
        }
        return list; 
    }
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> list=new ArrayList<>();
        if (root!=null){ 
            list.addAll(inorderTraversal(root.left));   
            list.add(root.val);
            list.addAll(inorderTraversal(root.right)); 
        }
        return list; 
    }
}
